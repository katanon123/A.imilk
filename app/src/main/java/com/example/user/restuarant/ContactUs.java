package com.example.user.restuarant;import android.Manifest;import android.annotation.TargetApi;import android.app.AlertDialog;import android.content.ContentProviderOperation;import android.content.ContentResolver;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.content.OperationApplicationException;import android.content.pm.PackageManager;import android.net.Uri;import android.os.Build;import android.os.Bundle;import android.os.RemoteException;import android.os.StrictMode;import android.provider.ContactsContract;import android.support.v4.app.ActivityCompat;import android.support.v7.app.AppCompatActivity;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.BaseAdapter;import android.widget.Button;import android.widget.ImageView;import android.widget.ListView;import android.widget.TextView;import android.widget.Toast;import com.example.user.restuarant.commonclass.ReadJson;import com.squareup.picasso.Picasso;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;public class ContactUs extends AppCompatActivity {    ListView contactLL;    private String url = "", resultJson,webservicepath,Name,path_imgae;    ReadJson readJson;    private ArrayList<HashMap<String, String>> MyArrListTotal = new ArrayList<>();    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_contact_us);        if (Build.VERSION.SDK_INT > 9) {            StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder().permitAll().build();            StrictMode.setThreadPolicy(policy);        }        webservicepath = getResources().getString(R.string.path_webservice);        path_imgae = getResources().getString(R.string.path_imgae);        Intent intent = getIntent();        Name = intent.getStringExtra("Name");//รับค่าจากหน้าที่ส่งมาให้        setTitle(Name);        if (Build.VERSION.SDK_INT >= 23) {            // Marshmallow+            insertDummyContactWrapper();        } else {            // Pre-Marshmallow        }        contactLL=(ListView)findViewById(R.id.contactLL);        getData();        contactLL.setAdapter(new Adapter(getApplication(), MyArrListTotal));    }    private void getData() {        HashMap<String, String> map;        readJson = new ReadJson();        url = webservicepath + "GetActiveBranch";        resultJson = "GetActiveBranchResult";        String jsonResult = readJson.getHttpGet(url);        try {            JSONObject jsonObMain = new JSONObject(jsonResult);            JSONArray data = jsonObMain.getJSONArray(resultJson);            for (int i = 0; i < data.length(); i++) {                JSONObject c = data.getJSONObject(i);                map = new HashMap<String, String>();                map.put("Id", c.getString("Id"));                map.put("Name", c.getString("Name"));                map.put("Address", c.getString("Address"));                map.put("ImageURL", c.getString("ImageURL"));                map.put("Latitude", c.getString("Latitude"));                map.put("Longitude", c.getString("Longitude"));                map.put("TellNumber", c.getString("TellNumber"));                MyArrListTotal.add(map);            }        } catch (JSONException e) {            e.printStackTrace();            Log.e("error", e.toString());        }    }    public class Adapter extends BaseAdapter {        private Context context;        private ArrayList<HashMap<String, String>> MyArr = new ArrayList<HashMap<String, String>>();        public Adapter(Context c, ArrayList<HashMap<String, String>> list) {            context = c;            MyArr = list;        }        @Override        public int getCount() {            return MyArr.size();        }        @Override        public Object getItem(int position) {            return position;        }        @Override        public long getItemId(int position) {            return position;        }        @Override        public View getView(final int position, View convertView, ViewGroup parent) {            LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);            if (convertView == null) {                convertView = inflater.inflate(R.layout.gut_contactus, null);            }            TextView name_textview = (TextView) convertView.findViewById(R.id.name_textview);            TextView Id_textView = (TextView) convertView.findViewById(R.id.Id_textView);            ImageView imageView = (ImageView) convertView.findViewById(R.id.list_hotel_imageview);            TextView Address_textView= (TextView) convertView.findViewById(R.id.Address_textView);            TextView ImageURL_textView= (TextView) convertView.findViewById(R.id.ImageURL_textView);            TextView Latitude_textView= (TextView) convertView.findViewById(R.id.Latitude_textView);            TextView Longitude_textView= (TextView) convertView.findViewById(R.id.Longitude_textView);            TextView TellNumber_textView= (TextView) convertView.findViewById(R.id.TellNumber_textView);            ImageView pic_imageView =(ImageView)convertView.findViewById(R.id.pic_imageView);            Button tel_button =(Button)convertView.findViewById(R.id.tel_button);            Button map_button =(Button)convertView.findViewById(R.id.map_button);            //name_textview.setText(MyArr.get(position).get("Name"));            name_textview.setText(MyArr.get(position).get("Name"));            Id_textView.setText(MyArr.get(position).get("Id"));            Address_textView.setText(MyArr.get(position).get("Address"));            ImageURL_textView.setText(MyArr.get(position).get("ImageURL"));            Latitude_textView.setText(MyArr.get(position).get("Latitude"));            Longitude_textView.setText(MyArr.get(position).get("Longitude"));            tel_button.setText(MyArr.get(position).get("TellNumber"));            String url = MyArr.get(position).get("ImageURL");            if (!url.equals("null")) {                try {                    Picasso.with(context)                            .load(path_imgae+url)                            .placeholder(R.drawable.logo_bunchooo) //ภาพเริ่มต้น                            .error(R.drawable.logo_bunchooo)//                            .resize(imgWidth, imgHeight)//ปรับขนาด//                            .centerCrop()//ตัดภาพ                            .into(pic_imageView);//เอารูปตัวไหน                } catch (Exception e) {                    pic_imageView.setImageResource(R.drawable.bar);                }            } else {                pic_imageView.setImageResource(R.drawable.bar);            }            final String lat = MyArr.get(position).get("Latitude");            final String log = MyArr.get(position).get("Longitude");            map_button.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {//                    Intent intent = new Intent(ListMap.this,ViewDetailMap.class);//                    intent.putExtra("Latitude", MyArr.get(position).get("Latitude"));//                    intent.putExtra("Longitude", MyArr.get(position).get("Longitude"));//                    startActivity(intent);                    String uri = "http://maps.google.com/maps?saddr=" + lat+","+log+"&daddr="+lat+","+log;                    Intent intent = new Intent(android.content.Intent.ACTION_VIEW, Uri.parse(uri));                    //intent.setClassName("com.google.android.apps.maps", "com.google.android.maps.MapsActivity");                    startActivity(intent);                }            });            tel_button.setOnClickListener(new View.OnClickListener() {                final String call = MyArr.get(position).get("TellNumber");                @Override                public void onClick(View v) {                    final AlertDialog.Builder adb = new AlertDialog.Builder(ContactUs.this);                    adb.setMessage("ต้องการโทรออกหมายเลข" + call);                    adb.setNegativeButton("ไม่", new AlertDialog.OnClickListener() {                        public void onClick(DialogInterface dialog, int arg1) {                        }                    });                    adb.setPositiveButton("ใช่", new AlertDialog.OnClickListener() {                        public void onClick(DialogInterface dialog, int arg1) {                            Intent callIntent = new Intent(Intent.ACTION_CALL);                            callIntent.setData(Uri.parse("tel:" + call));                            if (ActivityCompat.checkSelfPermission(ContactUs.this, Manifest.permission.CALL_PHONE) != PackageManager.PERMISSION_GRANTED) {                                Toast.makeText(getApplication(),"wwwwwwwwwwwwwwwwwwwww",Toast.LENGTH_LONG).show();                                // TODO: Consider calling                                //    ActivityCompat#requestPermissions                                // here to request the missing permissions, and then overriding                                //   public void onRequestPermissionsResult(int requestCode, String[] permissions,                                //                                          int[] grantResults)                                // to handle the case where the user grants the permission. See the documentation                                // for ActivityCompat#requestPermissions for more details.                                return;                            } startActivity(callIntent);                        }                    });                    adb.show();                }            });            return convertView;        }    }    final private int REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS = 124;    @TargetApi(Build.VERSION_CODES.M)    private void insertDummyContactWrapper() {        List<String> permissionsNeeded = new ArrayList<String>();        final List<String> permissionsList = new ArrayList<String>();//        if (!addPermission(permissionsList, Manifest.permission.ACCESS_FINE_LOCATION))//            permissionsNeeded.add("GPS");        if (!addPermission(permissionsList, Manifest.permission.READ_CONTACTS))            permissionsNeeded.add("Read Contacts");        if (!addPermission(permissionsList, Manifest.permission.CALL_PHONE))            permissionsNeeded.add("CALL_PHONE");        if (permissionsList.size() > 0) {            if (permissionsNeeded.size() > 0) {                // Need Rationale                String message = "You need to grant access to " + permissionsNeeded.get(0);                for (int i = 1; i < permissionsNeeded.size(); i++)                    message = message + ", " + permissionsNeeded.get(i);                showMessageOKCancel(message, new DialogInterface.OnClickListener() {                    @TargetApi(Build.VERSION_CODES.M)                    @Override                    public void onClick(DialogInterface dialog, int which) {                        requestPermissions(permissionsList.toArray(new String[permissionsList.size()]),                                REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS);                    }                });                return;            }            requestPermissions(permissionsList.toArray(new String[permissionsList.size()]),                    REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS);            return;        }        insertDummyContact();    }    @TargetApi(Build.VERSION_CODES.M)    private boolean addPermission(List<String> permissionsList, String permission) {        if (getApplication().checkSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) {            permissionsList.add(permission);            // Check for Rationale Option            if (!shouldShowRequestPermissionRationale(permission))                return false;        }        return true;    }    @Override    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {        switch (requestCode) {            case REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS: {                Map<String, Integer> perms = new HashMap<String, Integer>();                // Initial                perms.put(Manifest.permission.READ_CONTACTS, PackageManager.PERMISSION_GRANTED);                perms.put(Manifest.permission.CALL_PHONE, PackageManager.PERMISSION_GRANTED);                // Fill with results                for (int i = 0; i < permissions.length; i++)                    perms.put(permissions[i], grantResults[i]);                // Check for ACCESS_FINE_LOCATION                if (perms.get(Manifest.permission.READ_CONTACTS) == PackageManager.PERMISSION_GRANTED                        && perms.get(Manifest.permission.CALL_PHONE) == PackageManager.PERMISSION_GRANTED                        ) {                    // All Permissions Granted                    insertDummyContact();                } else {                    // Permission Denied//                    Toast.makeText(getActivity(), "Some Permission is Denied", Toast.LENGTH_SHORT)//                            .show();                }            }            break;            default:                super.onRequestPermissionsResult(requestCode, permissions, grantResults);        }    }    private void showMessageOKCancel(String message, DialogInterface.OnClickListener okListener) {        new AlertDialog.Builder(ContactUs.this)                .setMessage(message)                .setPositiveButton("OK", okListener)                .setNegativeButton("Cancel", null)                .create()                .show();    }    private static final String TAG = "Contacts";    private void insertDummyContact() {        // Two operations are needed to insert a new contact.        ArrayList<ContentProviderOperation> operations = new ArrayList<ContentProviderOperation>(2);        // First, set up a new raw contact.        ContentProviderOperation.Builder op =                ContentProviderOperation.newInsert(ContactsContract.RawContacts.CONTENT_URI)                        .withValue(ContactsContract.RawContacts.ACCOUNT_TYPE, null)                        .withValue(ContactsContract.RawContacts.ACCOUNT_NAME, null);        operations.add(op.build());        // Next, set the name for the contact.        op = ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI)                .withValueBackReference(ContactsContract.Data.RAW_CONTACT_ID, 0)                .withValue(ContactsContract.Data.MIMETYPE, ContactsContract.CommonDataKinds.StructuredName.CONTENT_ITEM_TYPE)                .withValue(ContactsContract.CommonDataKinds.StructuredName.DISPLAY_NAME,                        "__DUMMY CONTACT from runtime permissions sample");        operations.add(op.build());        // Apply the operations.        ContentResolver resolver = getApplication().getContentResolver();        try {            resolver.applyBatch(ContactsContract.AUTHORITY, operations);        } catch (RemoteException e) {            Log.d(TAG, "Could not add a new contact: " + e.getMessage());        } catch (OperationApplicationException e) {            Log.d(TAG, "Could not add a new contact: " + e.getMessage());        }    }}